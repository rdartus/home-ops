# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/refs/heads/main/charts/library/common/values.schema.json
---
controllers:
  main:
    containers:
      main:
        image:
          # -- image repository
          repository: ghcr.io/toboshii/hajimari
          # -- image pull policy
          pullPolicy: IfNotPresent
          # -- image tag
          tag: v0.3.1

# -- environment variables.
# @default -- See below
env:
  # -- Set the container timezone
  TZ: UTC

# -- Configures Hajimari settings for this instance.
# @default -- See below
hajimari:
  defaultEnable: false
  namespaceSelector:
    matchNames:
    - default
    - argocd
    - podinfo
    - jeanpi
    
  title: "test title"
  name: "Chacal"
  lightTheme: Paper
  darkTheme: horizon
  showAppGroups: true

  customApps: 
  - group: Hallais
    apps:
      - name: AnaNAS
        group: 'Hallais-Corp'
        url: 'https://ananas-ext.synology.me:5001'
        icon: 'fruit-pineapple'
        info: 'NAS'

  alwaysTargetBlank: true
  createCRAppSample: false
  defaultSearchProvider: Google
  defaultAppIcon: mdi:application
  searchProviders:
    - name: Google
      token: g
      icon: simple-icons:google
      searchUrl: https://www.google.com/search?q={query}
      url: https://www.google.com
    - name: DuckDuckGo
      token: d
      icon: simple-icons:duckduckgo
      searchUrl: https://duckduckgo.com/?q={query}
      url: https://duckduckgo.com
    - name: IMDB
      token: i
      icon: simple-icons:imdb
      searchUrl: https://www.imdb.com/find?q={query}
      url: https://www.imdb.com
    - name: Reddit
      token: r
      icon: simple-icons:reddit
      searchUrl: https://www.reddit.com/search?q={query}
      url: https://www.reddit.com
    - name: YouTube
      token: 'y'
      icon: simple-icons:youtube
      searchUrl: https://www.youtube.com/results?search_query={query}
      url: https://www.youtube.com
    - name: Spotify
      token: s
      icon: simple-icons:spotify
      searchUrl: hhttps://open.spotify.com/search/{query}
      url: https://open.spotify.com

# -- Configures service settings for the chart.
# @default -- See values.yaml
service:
  main:
    # -- Enables or disables the service
    enabled: true

    # -- Override the name suffix that is used for this service
    nameOverride: ""

    # -- Configure which controller this service should target
    controller: main

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    # # -- Specify the internalTrafficPolicy for the service. Options: Cluster, Local
    # # -- [[ref](https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/)]
    # internalTrafficPolicy:

    # # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    # externalTrafficPolicy:

    # # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    # ipFamilyPolicy:
    # # -- The ip families that should be used. Options: IPv4, IPv6
    # ipFamilies: []

    # # -- Provide additional annotations which may be required.
    # annotations: {}

    # # -- Provide additional labels which may be required.
    # labels: {}

    # # -- Allow adding additional match labels
    # extraSelectorLabels: {}

    # # -- Configure the Service port information here.
    # # Additional ports can be added by adding a dictionary key similar to the 'http' service.
    # # @default -- See below
    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 3000

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

  #       # -- Specify a service targetPort if you wish to differ the service port from the application port.
  #       # If `targetPort` is specified, this port number is used in the container definition instead of
  #       # the `port` value. Therefore named ports are not supported for this field.
  #       targetPort:

  #       # -- Specify the nodePort value for the LoadBalancer and NodePort service types.
  #       # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
  #       nodePort:

  #       # -- Specify the appProtocol value for the Service.
  #       # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
  #       appProtocol:

# -- Configures service account needed for reading k8s ingress objects
# @default -- See below
serviceAccount:
  # -- Create service account
  create: true

ingress:
  main:
    # -- Enables or disables the ingress
    enabled: true

    # -- Override the name suffix that is used for this ingress.
    # nameOverride:

    # -- Provide additional annotations which may be required.
    annotations:
      hajimari.io/enable: "true"
      hajimari.io/group: "Home"
      hajimari.io/icon: "cog-play-outline"
      cert-manager.io/cluster-issuer: letsencrypt-staging

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Set the ingressClass that is used for this ingress.
    className: "traefik-ingresses"

    # -- Configure the defaultBackend for this ingress. This will disable any other rules for the ingress.
    defaultBackend: 
      service: 
        name: "hajimari"
        port: 
          number: 3000

persistence:
  config:
    enabled: true
    type: configMap
    name: hajimari-settings
