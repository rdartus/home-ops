apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-scripts
  namespace: default
data:
  default-policy.json: |

    path "kv-v2/data/default/*" {
      capabilities = ["read"]
    }
  arr-policy.json: |

    path "kv-v2/data/arr/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/postgresql/arr" {
      capabilities = ["read"]
    }
  ddns-updater-policy.json: |

    path "kv-v2/data/ddns-updater/*" {
      capabilities = ["read"]
    }
  cnpg-policy.json: |

    path "kv-v2/data/postgresql/*" {
      capabilities = ["read"]
    }
  pgsql-policy.json: |

    path "kv-v2/data/postgresql/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/arr/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/pgadmin/*" {
      capabilities = ["read"]
    }

  redis-policy.json: |

    path "kv-v2/data/redis/*" {
      capabilities = ["read"]
    }
  crowdsec-policy.json: |

    path "kv-v2/data/crowdsec/*" {
      capabilities = ["read"]
    }
  pgadmin-policy.json: |

    path "kv-v2/data/pgadmin" {
      capabilities = ["read"]
    }
    path "kv-v2/data/default/*" {
      capabilities = ["read"]
    }
  onlyoffice-policy.json: |
    path "kv-v2/data/postgresql/office" {
      capabilities = ["read"]
    }
    path "kv-v2/data/onlyoffice" {
      capabilities = ["read"]
    }
  immich-policy.json: |

    path "kv-v2/data/immich" {
      capabilities = ["read"]
    }
  filebrowser-policy.json: |

    path "kv-v2/data/filebrowser" {
      capabilities = ["read"]
    }
  idm-policy.json: |

    path "kv-v2/data/smtp/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/authentik/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/postgresql/superuser" {
      capabilities = ["read"]
    }
    path "kv-v2/data/postgresql/auth" {
      capabilities = ["read"]
    }
    path "kv-v2/data/postgresql/vauban" {
      capabilities = ["read"]
    }
    path "kv-v2/data/redis/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/default/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/default/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/zitadel" {
      capabilities = ["read"]
    }
  kubeprom-policy.json: |

    path "kv-v2/data/kubeprom/*" {
      capabilities = ["read"]
    }

  wx-policy.json: |
    path "kv-v2/data/wx/*" {
      capabilities = ["read"]
    }
  ssh-policy.json: |
    path "kv-v2/data/ssh/*" {
      capabilities = ["read"]
    }
    path "kv-v2/data/ssh" {
      capabilities = ["read"]
    }
  tandoor-policy.json: |
    path "kv-v2/data/tandoor" {
      capabilities = ["read"]
    }
    path "kv-v2/data/postgresql/tand" {
      capabilities = ["read"]
    }
  zerossl-policy.json: |
    path "kv-v2/data/zerossl" {
      capabilities = ["read"]
    }
  wireguard-policy.json: |
    path "kv-v2/data/wireguard" {
      capabilities = ["read"]
    }
  scale-policy.json: |
    path "kv-v2/data/scale/*" {
      capabilities = ["read"]
    }

  manager-policy.json: |
    path "/secret/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
    }
  reader-policy.json: |
    path "/secret/*" {
      capabilities = ["read", "list"]
    } 
  gitops-policy.json: |

    path "kv-v2/data/gitOps" {
      capabilities = ["read"]
    }
  initScript.sh: |

    #!/bin/sh
    # Three scenarios
    # * Vault is not running yet
    # ** Just wait...
    # * Vault is running but not initialized
    # ** Exit, it needs to be initialized and unsealed manually
    # * Vault is running and initialized but sealed
    # ** Take action and unseal the vault, then exit
    # * Vault is running, initialized and unsealed
    # ** all is good, exit

    COUNT=1
    LIMIT=60
    while [ 1 ]
    do
      echo "Checking if Vault is up and running (try $COUNT)..."
      VAULT_STATUS=$(vault status $1 2>&1)
      EXIT_STATUS=$?
      STATUS = $(vault status)
      echo "Vault status $STATUS"
      export STATUS=$(vault status | grep 'Initialized' | awk '{print $2}')
      echo "status vault $STATUS"
      if [ $STATUS = "false" ]; then
        vault operator init -key-shares=3 -key-threshold=2 | tee /var/tmp/vault.init

        # Store master keys in consul for operator to retrieve and remove
        COUNTER=1
        cat /var/tmp/vault.init  | grep '^Unseal' | awk '{print $4}' | for key in $(cat -); do
          echo  $key | tee /var/tmp/vault-init-$COUNTER
          COUNTER=$((COUNTER + 1))
        done

        export ROOT_TOKEN=$(cat /var/tmp/vault.init | grep '^Initial' | awk '{print $4}')
        echo  $ROOT_TOKEN | tee /var/tmp/vault-root-token

        # echo "Remove master keys from disk"
        # shred /var/tmp/vault.init

        echo "Unsealing Vault"
        vault operator unseal $(cat /var/tmp/vault-init-1)
        vault operator unseal $(cat /var/tmp/vault-init-2)

        echo "Vault init complete."

        echo "Start configuration"
        vault login $ROOT_TOKEN
        vault secrets enable kv-v2
        vault auth enable oidc
        vault kv put kv-v2/ddns-updater/config CONFIG='@/config/cred/ddns-config'
        vault auth enable kubernetes
        vault write auth/kubernetes/config kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443"

        # vault kv put kv-v2/postgresql/config init-authentik="@/config/cred/init-authentik.sql" init-radarr-log="@/config/cred/init-radarr-log.sql" init-radarr-main="@/config/cred/init-radarr-main.sql" init-sonarr-log="@/config/cred/init-sonarr-log.sql" init-sonarr-main="@/config/cred/init-sonarr-main.sql" init-prowlarr-log="@/config/cred/init-prowlarr-log.sql" init-prowlarr-main="@/config/cred/init-prowlarr-main.sql" init-user-auth="@/config/cred/init-user-auth.sql" init-DB="@/config/cred/init-DB.sql"
        vault kv put kv-v2/postgresql/superuser username="postgres" password="@/config/cred/DB-superuser-password"
        vault kv put kv-v2/postgresql/arr username="@/config/cred/DB-arr-user" password="@/config/cred/DB-arr-password"
        vault kv put kv-v2/postgresql/auth username="@/config/cred/DB-auth-user" password="@/config/cred/DB-auth-password"
        vault kv put kv-v2/postgresql/tand username="@/config/cred/DB-tand-user" password="@/config/cred/DB-tand-password"
        vault kv put kv-v2/postgresql/vauban username="@/config/cred/DB-vauban-user" password="@/config/cred/DB-vauban-password"
        vault kv put kv-v2/postgresql/office username="@/config/cred/DB-office-user" password="@/config/cred/DB-office-password"
        vault kv put kv-v2/ssh key="@/config/cred/key"
        vault kv put kv-v2/arr/config sonarrKey="@/config/cred/sonarrKey" prowlarrKey="@/config/cred/prowlarrKey" radarrKey="@/config/cred/radarrKey"
        vault kv put kv-v2/default/config username="admin" password="@/config/cred/default-password" passwordPBKDF2="@/config/cred/default-passwordPBKDF2" secpassword="@/config/cred/default-sec-password"
        vault kv put kv-v2/default/smb username="jeank" password="@/config/cred/jeank-smb"
        vault kv put kv-v2/default/smb-longhorn CIFS_USERNAME="jeank" CIFS_PASSWORD="@/config/cred/jeank-smb"
        vault kv put kv-v2/crowdsec/config enroll_key="@/config/cred/crowdsec_enroll_key" bouncer_traefik="@/config/cred/crowdsec_bouncer_traefik"
        vault kv put kv-v2/redis/config password="@/config/cred/redis-password"
        vault kv put kv-v2/authentik/config key="@/config/cred/authentik-key" _gsuite-id="@/config/cred/_gsuite-authentik-id" _gsuite-secret="@/config/cred/_gsuite-authentik-secret"
        vault kv put kv-v2/kubeprom/config username="@/config/cred/grafanaUser" password="@/config/cred/grafanaPassword"
        vault kv put kv-v2/smtp/config gmail_username="@/config/cred/gmail-user" gmail_password="@/config/cred/gmail-password" username="@/config/cred/gmail-username"
        vault kv put kv-v2/wx/config username="@/config/cred/wx-user" password="@/config/cred/wx-password"
        vault kv put kv-v2/wx/list list.json="@/config/cred/wx-list"
        vault kv put kv-v2/tandoor key="@/config/cred/tandoorKey" oidcProvider="@/config/cred/tandoorSocialProvider"
        vault kv put kv-v2/zerossl keyID="@/config/cred/zeroSSLID" HMAC="@/config/cred/zeroSSLHMAC"
        vault kv put kv-v2/pgadmin oidcSecret="@/config/cred/pgadminOIDCSecret" oidcClient="@/config/cred/pgadminOIDCClient" oidcConf="@/config/cred/pgadminOIDCConf"
        vault kv put kv-v2/filebrowser oidcSecret="@/config/cred/filebrowserOIDCSecret" oidcClient="@/config/cred/filebrowserOIDCClient"
        vault kv put kv-v2/immich oidcSecret="@/config/cred/immichOIDCSecret" oidcClient="@/config/cred/immichOIDCClient"
        vault kv put kv-v2/zitadel masterkey="@/config/cred/zitadel-masterkey" _gsuite-id="@/config/cred/_gsuite-zitadel-id" _gsuite-secret="@/config/cred/_gsuite-zitadel-secret"
        vault kv put kv-v2/gitOps OIDC_CLIENT_ID="@/config/cred/gitOpsOIDCClient" OIDC_CLIENT_SECRET="@/config/cred/gitOpsOIDCSecret" OIDC_SCOPES="openid profile email" OIDC_ISSUER_URL="https://authentik.dartus.fr/application/o/gitops/"
        vault kv put kv-v2/scale/operator-oauth client_id="@/config/cred/tailscaleOIDCClient" client_secret="@/config/cred/tailscaleOIDCSecret"
        vault kv put kv-v2/wireguard oidcSecret="@/config/cred/gitOpsOIDCSecret" oidcClient="@/config/cred/gitOpsOIDCClient"

        vault policy write plccnpg /config/scripts/cnpg-policy.json
        vault policy write plcpgsql /config/scripts/pgsql-policy.json
        vault policy write plcssh /config/scripts/ssh-policy.json        
        vault policy write plcpgadmin /config/scripts/pgadmin-policy.json        
        vault policy write plcimmich /config/scripts/immich-policy.json        
        vault policy write plcfilebrowser /config/scripts/filebrowser-policy.json
        vault policy write plconlyoffice /config/scripts/onlyoffice-policy.json
        vault policy write plccrowdsec /config/scripts/crowdsec-policy.json        
        vault policy write plcredis /config/scripts/redis-policy.json        
        vault policy write plcddns-updater /config/scripts/ddns-updater-policy.json        
        vault policy write plcarr /config/scripts/arr-policy.json        
        vault policy write plcdefault /config/scripts/default-policy.json     
        vault policy write plcidm /config/scripts/idm-policy.json     
        vault policy write plckubeprom /config/scripts/kubeprom-policy.json     
        vault policy write plcwx /config/scripts/wx-policy.json        
        vault policy write plctandoor /config/scripts/tandoor-policy.json        
        vault policy write plczerossl /config/scripts/zerossl-policy.json        
        vault policy write plcgitops /config/scripts/gitops-policy.json        
        vault policy write plcscale /config/scripts/scale-policy.json        

        vault policy write reader /config/scripts/reader-policy.json       
        vault policy write manager /config/scripts/manager-policy.json        

        vault write auth/kubernetes/role/rlcnpg \
        bound_service_account_names=cnpg-cluster \
        bound_service_account_namespaces=database \
        policies=plccnpg \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlpgsql \
        bound_service_account_names=default \
        bound_service_account_namespaces=database \
        policies=plcpgsql \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlssh \
        bound_service_account_names=default \
        bound_service_account_namespaces=database \
        policies=plcssh \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlcrowdsec \
        bound_service_account_names=default \
        bound_service_account_namespaces=network \
        policies=plccrowdsec \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlredis \
        bound_service_account_names=redis-master \
        bound_service_account_namespaces=default \
        policies=plcredis \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlpgadmin \
        bound_service_account_names=default \
        bound_service_account_namespaces=database \
        policies=plcpgadmin \
        audience=vault\
        ttl=24h
        
        vault write auth/kubernetes/role/rlimmich \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plcimmich \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlfilebrowser \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plcfilebrowser \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlonlyoffice \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plconlyoffice \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlddns-updater \
        bound_service_account_names=default \
        bound_service_account_namespaces=network \
        policies=plcddns-updater \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlarr \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plcarr \
        audience=vault\
        ttl=24h
        
        vault write auth/kubernetes/role/rldefault \
        bound_service_account_names=default \
        bound_service_account_namespaces=default,kube-system,longhorn-system\
        policies=plcdefault \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlidm \
        bound_service_account_names=authentik,default \
        bound_service_account_namespaces=default \
        policies=plcidm \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlkubeprom \
        bound_service_account_names=default \
        bound_service_account_namespaces=observability \
        policies=plckubeprom \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlwx \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plcwx \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rltandoor \
        bound_service_account_names=default \
        bound_service_account_namespaces=default \
        policies=plctandoor \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlzerossl \
        bound_service_account_names=cert-manager \
        bound_service_account_namespaces=cert-manager \
        policies=plczerossl \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlgitops \
        bound_service_account_names=default \
        bound_service_account_namespaces=kube-system \
        policies=plcgitops \
        audience=vault\
        ttl=24h

        vault write auth/kubernetes/role/rlscale \
        bound_service_account_names=default \
        bound_service_account_namespaces=network \
        policies=plcscale \
        audience=vault\
        ttl=24h

        vault write auth/oidc/config \
        oidc_discovery_url="https://authentik.dartus.fr/application/o/vault/" \
        oidc_client_id="@/config/cred/vaultOIDCClient" \
        oidc_client_secret="@/config/cred/vaultOIDCSecret" \
        default_role="reader"

        vault write auth/oidc/role/reader \
        bound_audiences="@/config/cred/vaultOIDCClient" \
        allowed_redirect_uris="https://vault.dartus.fr/ui/vault/auth/oidc/oidc/callback" \
        allowed_redirect_uris="https://vault.dartus.fr/oidc/callback" \
        allowed_redirect_uris="http://vault.dartus.fr/ui/vault/auth/oidc/oidc/callback" \
        allowed_redirect_uris="http://vault.dartus.fr/ui/vault/auth?with=oidc" \
        allowed_redirect_uris="http://vault.dartus.fr/oidc/callback" \
        allowed_redirect_uris="http://localhost:8250/oidc/callback" \
        user_claim="sub" \
        policies="reader"\
        groups_claim="groups" \

        exit 0
      elif [ $STATUS = "true" ]; then
        exit 0
      elif [ $COUNT -ge $LIMIT ]; then
        # Dont know what happened... Exiting
        echo "$VAULT_STAUS" &> /proc/1/fd/1
        exit 1
      else
        # For debugging
        echo "$VAULT_STATUS" &> /proc/1/fd/1
        ps aux &> /proc/1/fd/1
      fi
      COUNT=$((COUNT+1))
      sleep 1
    done